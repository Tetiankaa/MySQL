use tanya

db.teacher.find()
db.students.find()

 db.teacher.aggregate([
     {
         $group:{
             _id:'$lesson'
         }
     }
 ])

db.teacher.aggregate([
    {
        $group:{
            _id:'$lesson',
            countOfLessons:{$sum:1},
            min:{$min:'$payment'},
            max:{$max:'$payment'},
            avg:{$avg:'$payment'},
            sum:{$sum:'$payment'}
        }
    }
])


db.teacher.aggregate([
    {
        $group:{
            _id:'$lesson',
            count:{$sum:1}
        }
    },
    {
        $sort:{count:-1}
    },
    {
        $project:{
            _id:0,
            lesson:'$_id',
            count:1
        }
    }
])

db.teacher.aggregate([
    {
        $lookup:{
            from:'students',
            localField:'class_curator',
            foreignField:'class',
            as:'myStudents'
        }
    }
])

db.teacher.aggregate([
    {
        $match:{class_curator:{$gt:5}}
    },
    {
        $lookup:{
            from:'students',
            localField:'class_curator',
            foreignField:'class',
            as:'myStudents'
        }
    }
])

db.teacher.aggregate([
    {
        $lookup:{
            from:'students',
            localField:'class_curator',
            foreignField:'class',
            as:'myStudents'
        }
    },
    {
        $match:{
            'myStudents.name':"Ivan"
        }
    }
])

db.teacher.aggregate([
    {
        $lookup:{
            from:'students',
            localField:'class_curator',
            foreignField:'class',
            as:'myStudents'
        }
    },
    {
        $unwind:'$myStudents'
    }
])

db.teacher.aggregate([
    {
        $lookup:{
            from:'students',
            localField:'class_curator',
            foreignField:'class',
            as:'myStudents'
        }
    },
    {
        $unwind:'$myStudents'
    },
    {
        $unwind: '$myStudents.parents'
    }
])

db.teacher.aggregate([
    {
        $lookup:{
            from:'students',
            localField:'class_curator',
            foreignField:'class',
            as:'myStudents'
        }
    },
    {
        $unwind:'$myStudents'
    },
    {
        $unwind: '$myStudents.parents'
    },
    {
        $match: {'myStudents.parents.profession': 'doctor'}
    }

    ,{
        $count:'count'
    }
])

db.students.aggregate([
    {
        $addFields:{
            nameLength:{$strLenCP:'$name'}
        }
    },
    {
        $match:{nameLength:{$eq:4}}
    },
    {
        $project:{nameLength:0}
    }
])

/* the same but with find method*/

db.students.find({$expr:{$eq:[{$strLenCP:"$name"},3]}})


/*
Aggregation is a way of processing a large number of documents in a collection by means of passing them through different stages(pipelines)
    $sort  stage – sorts the resulting documents the way we require (ascending or descending)
    $group stage – does the aggregation job
    $project stage - returns only fields you need

$sum - sums up the specified values of all documents in the collection.
$min - displays the minimum value of a document’s field in the collection.
$max - displays the maximum value of a document’s field in the collection.
$avg - displays the average value of a document’s field in the collection.

$lookup - merges fields from two collections.
$match - allows to choose just those documents that we want to work with.(find)
$unwind - is used to deconstruct an array field within documents, effectively creating a separate document for each element in the array
$addFields - allows to add new fields

$strLenCP - returns the length of the element
  */